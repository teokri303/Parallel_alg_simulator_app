{
    "Shearsort algorithm": "Shearsort algorithm",
    "Schnorr Shamir algorithm": "Schnorr-Shamir algorithm",
    "Show array": "Show mesh",
    "English": "EN",
    "Greek": "EL",
    "Subtitle": "Parallel sorting algorithm simulator",
    "no conf" : "Define mesh to display",
    "Reset Grid":"Reset mesh",
    "Ready to sort":"Ready to sort",
    "More text": "Show more",
    "Less text":"Show less",


    "Enter mesh dimensions" :"Select mesh dimensions",
    "Random array":"Random mesh",
    "Own":"My own mesh",
    "Sort" : "Sort",

    "shear text" : "<p>Shearsort is a mesh-sorting parallel algorithm which alternately sorts rows and columns of the mesh. In particular, we sort all of the rows in odd-numbered phases (i.e., phase 1, 3, 5,...) and we sort all of the columns in even-numbered phases (i.e., phase 2, 4, 6,...). The columns are sorted so that smaller numbers move upward. The odd rows are sorted so that smaller numbers move leftward, and the even rows are sorted in reverse order, i. e., so that smaller numbers move rightward. The numbers appear in a snakelike order fast enough (i.e., after at most logN + 1 phases) regarding the total number of elements to be sorted (N). Independent rows or columns are sorted using the odd-even transposition sort algorithm.<br/> Details can be found in <a href='https://www.sciencedirect.com/book/9781483207728/introduction-to-parallel-algorithms-and-architectures' target='_blank'><font color='blue'>F. T. Leighton, Introduction to Parallel Algorithms and Architectures, Elsevier, 1992</font></a> sections 1.6.1 and 1.6.2</font></a>.</p>",
    "ss text" :  "<p>For large meshes, i.e., for large sets of elements to be sorted, Shearsort is unnecessarily slow. In 1986, Schnorr and Shamir suggested an optimal parallel algorithm, often mentioned as ‘’3n‘’, for sorting meshes into snake-like row-major order requiring a number of steps which is at most 3 times the number of rows (or columns) of the mesh. The main idea lies in repeatedly sorting regions of the mesh fast before performing a sort operation on the whole mesh. To do so, time-consuming sort operations involving whole rows (or columns) of the mesh are limited while rounds of sorting in parallel smaller areas (i.e., blocks) of the mesh are induced. The ‘’3n‘’ algorithm evolves in 8 phases, 3 of which are 'expensive' (phase 2, 4 and 7) involving sorting operations on whole columns or rows, while the rest of the phases are performed fast on smaller regions of the mesh (i.e., blocks). Independent rows or columns are sorted using the odd-even transposition sort algorithm. Independent blocks are sorted using Shearsort. <br/> Details can be found in <a href='https://www.sciencedirect.com/book/9781483207728/introduction-to-parallel-algorithms-and-architectures' target='_blank'><font color='blue'>F. T. Leighton, Introduction to Parallel Algorithms and Architectures, Elsevier, 1992</font></a> sections 1.6.1 - 1.6.3 and in <a href='https://dl.acm.org/doi/10.1145/12130.12156' target='_blank'><font color='blue'>C. P. Schnorr and A. Shamir, An optimal sorting algorithm for mesh connected computers, in Proceedings of the 18th annual ACM Symposium on Theory of Computing (STOC 86), ACM, pp. 255–263, 1986</font></a>.</p>",


    "Back to sort" :"Back to creation",


    "Phase":"Phase ",

    "Random mesh pagi" :"Random mesh.",
    "Parallel sorting rows snakelike order" : "Row sorting.* In odd rows smaller numbers move leftward.* In even rows smaller numbers move rightward. " ,
    "Parallel sorting columns" : "Column sorting.* Smaller numbers move upward.",

    "final sorted": "Mesh sorted.* Numbers appear in snakelike order.",


    "Phase 1 - Snakelike blocks" : "Phase 1: Divide the mesh into N$1/4$ blocks of size N$3/8$ x N$3/8$ and simultaneuously sort each block in snakelike order. N is the number of mesh cells, i.e., the total number of elements to be sorted. ",
    "Phase 2 - K-way  Unshuffle" : "Phase 2:  Perform an N$1/8$-way unshuffle of the columns. In particular, permute the columns so that the N$3/8$ columns in each block are distributed evenly among the N$1/8$ vertical slices.* k-way unshuffle means the distribution of items to k players in a round-robin way with each player receiving evenly spaced items. A vertical slice contains a column of blocks. Here, unshuffle of the mesh columns means the distribution of the columns of each vertical slice to all other vertical slices. Mesh columns receive unique consecutive binary labels starting from 0. Unshuffle of the mesh columns practically means moving each column to a new position indicated by the cyclic right shift of the column-label, i.e., column 7 labelled 0111 is moved to position 11 labelled 1011.",
    "Phase 3 - Snakelike blocks" : "Phase 3: Sort each block into snakelike order.",
    "Phase 4 - Sort columns" : "Phase 4: Sort each column in linear order. Smaller numbers move upward.",
    "Phase 5 - Vertical slices sort (1-2...)" : "Phase 5: Collectively sort blocks 1 and 2, blocks 3 and 4, etc., of each vertical slice into snakelike order.",
    "Phase 6 - Vertical slices sort (2-3...)" : "Phase 6: Collectively sort blocks 2 and 3, blocks 4 and 5, etc., of each vertical slice into snakelike order.",
    "Phase 7 - Rows sort snakelike" : "Phase 7: Sort each row in linear order according to the direction of the overall snake. In odd rows smaller numbers move leftward. In even rows smaller numbers move rightward. ",
    "Phase 8 - 2N^3/8 Steps of odd-even transpotition" : "Phase 8: Perform 2N$3/8$ steps of odd-even transposition sort on the mesh.",

    "Reshape array to optimal dimensions" : "Reshape mesh to optimal dimensions.",
    "Reshape to given dimensions" : "Reshape mesh to given dimensions.",



    "language choose" : "Change language",
    "Tips":"Tips",


    "how to use_T": "How to use",
    "leema_T": "Why B&W",
    "mesh enclosures reshape_T": "Mesh enclosures",
    "the purpose_T" : "About the app",


    "how to use": "First select the parallel sorting algorithm (Shearsort or Schnorr-Shamir algorithm) you wish to apply by clicking on its box. Then, within the selected box, define and visualize the mesh: select its dimension by the dropdwn menu, either fill it automatically with random 0/1 values or fill in your own 0/1 values and click Show array to view. By clicking Sort, you see the algorithm running.",
    "leema": "Both algorithms correctly sort every input sequence. However, all input sequences - no matter what their exact values are - can alwyas be mapped to an appropriately generated sequence of zeros and ones which are visualized here as white and black cells, respectively." ,
    "mesh enclosures reshape": "Shearsort is a good choice for small meshes while for big meshes the algorithm by Schnorr-Shamir runs faster deploying a more sophisticated breakdown of the mesh into blocks. As you will probably notice, sometimes your mesh is embedded into a bigger one for facilitating the mesh breakdown into appropriate blocks.",
    "the purpose" : "This game-like interactive web app is intended to serve as assistive material for learning / training purposes regarding the study and analysis of two parallel sorting algorithms for two-dimensional meshes, i.e., the Shearsort algorithm and the '3n sort' algorithm suggested by Schnorr and Shamir."



}